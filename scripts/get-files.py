# AUTOGENERATED! DO NOT EDIT! File to edit: ../get-data.ipynb.

# %% auto 0
__all__ = ['URL', 'DATA_LOCATION', 'ARCHIVE', 'IMG_WIDTH', 'IMG_HEIGHT', 'train_pd', 'test_pd', 'train_X', 'train_y', 'test_X',
           'test_y', 'labels', 'DownloadProgressBar', 'download_url', 'decompress', 'convert', 'toPng']

# %% ../get-data.ipynb 2
URL = "https://www.itl.nist.gov/iaui/vip/cs_links/EMNIST/gzip.zip"
DATA_LOCATION = "./input"
ARCHIVE = f"{DATA_LOCATION}/gzip.zip"

# %% ../get-data.ipynb 3
from pathlib import Path

Path(DATA_LOCATION).mkdir(parents=True, exist_ok=True)

# %% ../get-data.ipynb 5
print("=== Downloading data ===")

from tqdm import tqdm
import urllib
import urllib.request
from pathlib import Path

class DownloadProgressBar(tqdm):
    def update_to(self, b=1, bsize=1, tsize=None):
        if tsize is not None:
            self.total = tsize
        self.update(b * bsize - self.n)


def download_url(url, output_path):
    with DownloadProgressBar(unit='B', unit_scale=True,
                             miniters=1, desc=url.split('/')[-1]) as t:
        urllib.request.urlretrieve(url, filename=output_path, reporthook=t.update_to)

if not Path(ARCHIVE).is_file():
    download_url(URL, ARCHIVE)
else:
    print("Data already downloaded")

# %% ../get-data.ipynb 7
print("=== Decompressing data ===")

import os
import zipfile

if not Path(f"{DATA_LOCATION}/emnist").is_dir():
    with zipfile.ZipFile(ARCHIVE, 'r') as zip_ref:
        zip_ref.extractall(DATA_LOCATION)

    os.rename(f"{DATA_LOCATION}/gzip", f"{DATA_LOCATION}/emnist")

# %% ../get-data.ipynb 8
import os
from glob import glob
from tqdm import tqdm

def decompress(infile):
    _ = os.system(f"gzip -dfk {infile} 2>/dev/null", )


for file in tqdm(glob(f"{DATA_LOCATION}/emnist/*.gz")):
    decompress(file)

# %% ../get-data.ipynb 9
print("=== Extracting data ===")

from tqdm import tqdm

# https://visualstudiomagazine.com/articles/2022/02/01/preparing-mnist-image-data-text-files.aspx
def convert(img_file, label_file, txt_file, n_images):
  #print("\nOpening binary pixels and labels files ")
  lbl_f = open(label_file, "rb")   # labels (digits)
  img_f = open(img_file, "rb")     # pixel values
  #print("Opening destination text file ")
  txt_f = open(txt_file, "w")      # output to write to

  #print("Discarding binary pixel and label headers ")
  img_f.read(16)   # discard header info
  lbl_f.read(8)    # discard header info

  #print("\nReading binary files, writing to text file ")
  #print("Format: 784 pixels then labels, tab delimited ")
  for i in tqdm(range(n_images)):   # number requested 
    lbl = ord(lbl_f.read(1))  # Unicode, one byte
    txt_f.write(str(lbl))
    for j in range(784):  # get 784 pixel vals
      val = ord(img_f.read(1))
      txt_f.write("," + str(val)) 
    txt_f.write("\n")
  img_f.close(); txt_f.close(); lbl_f.close()
  #print("\nDone ")


print("Extracting training data to csv")
convert("input/emnist/emnist-letters-train-images-idx3-ubyte", "input/emnist/emnist-letters-train-labels-idx1-ubyte", f"{DATA_LOCATION}/train.csv", 88800)

print("Extracting testing data to csv")
convert("input/emnist/emnist-letters-test-images-idx3-ubyte", "input/emnist/emnist-letters-test-labels-idx1-ubyte", f"{DATA_LOCATION}/test.csv", 14800)

# %% ../get-data.ipynb 10
import pandas as pd
import numpy as np
from pathlib import Path

IMG_WIDTH = 28
IMG_HEIGHT = 28

Path("imgs").mkdir(parents=True, exist_ok=True)

train_pd = pd.read_csv("./input/train.csv")
test_pd = pd.read_csv("./input/test.csv")

train_X = np.array(train_pd.iloc[:,1:].values)
train_y = np.array(train_pd.iloc[:,0].values)

test_X = np.array(test_pd.iloc[:,1:].values)
test_y = np.array(test_pd.iloc[:,0].values)

labels = set(list(np.unique(train_y)) + list(np.unique(test_y)))

# %% ../get-data.ipynb 11
print("=== Generation image file structure ===")

for label in labels:
    Path(f"imgs/train/{label}").mkdir(parents=True, exist_ok=True)
Path(f"imgs/test").mkdir(parents=True, exist_ok=True)

# %% ../get-data.ipynb 12
print("=== Export images ===")

from tqdm import tqdm
from PIL import Image

def toPng(data, file):
    data = data.reshape(IMG_WIDTH, IMG_HEIGHT).astype(np.uint8)
    img = Image.fromarray(data)
    img.save(file)

print("Exporting training images")
for ii, row in tqdm(train_pd.iterrows(), total=train_pd.shape[0]):
    label = row[0]
    data = row[1:].values

    file = f"imgs/train/{label}/{ii}.png"
    toPng(data, file)

print("Exporting testing images")
for ii, row in tqdm(test_pd.iterrows(), total=test_pd.shape[0]):
    label = row[0]
    data = row[1:].values

    file = f"imgs/test/{ii}.png"
    toPng(data, file)

# %% ../get-data.ipynb 13
print("=== verifying images ===")

from glob import glob
from tqdm import tqdm
from PIL import Image

for file in tqdm(glob(f"imgs/**/*.png", recursive=True)):
    im = Image.open(file)
    try:
        im.verify() 
    except:
        print(file)

